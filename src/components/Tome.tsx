/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 .\src\assets\tome.glb --types --transform -f webp -r 
Files: .\src\assets\tome.glb [4.1MB] > D:\Projects\Websites\AboutWoffo\tome-transformed.glb [460.21KB] (89%)
*/

import * as THREE from 'three'
import React, { useEffect, useRef, useState, type JSX } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { type GLTF, SkeletonUtils } from 'three-stdlib'

type ActionName = 'CloseAction' | 'OpenAction'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    PageBottom: THREE.SkinnedMesh
    PageBottom001: THREE.SkinnedMesh
    Plane_1: THREE.SkinnedMesh
    Plane_2: THREE.SkinnedMesh
    Plane001: THREE.SkinnedMesh
    Plane002: THREE.SkinnedMesh
    Bone: THREE.Bone
  }
  materials: {
    Material: THREE.MeshStandardMaterial
    AncientTome: THREE.MeshStandardMaterial
    ['Cover.back']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

const OpenAction = "OpenAction";
const CloseAction = "CloseAction";

export function Tome(props: JSX.IntrinsicElements['group'] & { shouldOpen?: boolean }) {
  const [isOpen, setOpen] = useState(false);
  const [isInit, setInit] = useState(false);

  const group = useRef<THREE.Group>(null!);
  const { scene, animations } = useGLTF('/tome.glb');
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as unknown as GLTFResult;
  const { actions } = useAnimations(animations, group)

  useEffect(()=>{
    if (actions[CloseAction]) {
      actions[CloseAction].setLoop(THREE.LoopOnce, 1);
      actions[CloseAction].clampWhenFinished = true;  
    }
    if (actions[OpenAction]) {
      actions[OpenAction].setLoop(THREE.LoopOnce, 1);
      actions[OpenAction].clampWhenFinished = true;  
    }
  }, [])

  useEffect(()=> {
    if (!actions || props.shouldOpen == undefined) return;
    if (props.shouldOpen && !isOpen) {
      actions[CloseAction]?.stop();
      actions[OpenAction]?.play();
      setOpen(true);
    } else if (!props.shouldOpen && isOpen) {
      actions[OpenAction]?.stop();
      actions[CloseAction]?.play();
      setOpen(false);
    }
  }, [actions, props.shouldOpen])

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" position={[-20, 0, 0]}>
          <primitive object={nodes.Bone} />
        </group>
        <skinnedMesh name="PageBottom" geometry={nodes.PageBottom.geometry} material={materials.Material} skeleton={nodes.PageBottom.skeleton} position={[-20, 0, 0]} />
        <skinnedMesh name="PageBottom001" geometry={nodes.PageBottom001.geometry} material={materials.Material} skeleton={nodes.PageBottom001.skeleton} position={[-20, 0, 0]} />
        <group name="Plane" position={[-20, 0, 0]}>
          <skinnedMesh name="Plane_1" geometry={nodes.Plane_1.geometry} material={materials.AncientTome} skeleton={nodes.Plane_1.skeleton} />
          <skinnedMesh name="Plane_2" geometry={nodes.Plane_2.geometry} material={materials['Cover.back']} skeleton={nodes.Plane_2.skeleton} />
        </group>
        <skinnedMesh name="Plane001" geometry={nodes.Plane001.geometry} material={materials.AncientTome} skeleton={nodes.Plane001.skeleton} position={[-20, 0, 0]} />
        <skinnedMesh name="Plane002" geometry={nodes.Plane002.geometry} material={materials.AncientTome} skeleton={nodes.Plane002.skeleton} position={[-20, 0, 0]} />
      </group>
    </group>
  )
}

useGLTF.preload('/tome.glb')
