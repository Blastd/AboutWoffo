/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 .\src\assets\tome.glb --types --transform -f webp -r 
Files: .\src\assets\tome.glb [4.1MB] > D:\Projects\Websites\AboutWoffo\tome-transformed.glb [460.21KB] (89%)
*/

import * as THREE from 'three'
import React, { useEffect, useRef, useState, type JSX } from 'react'
import { useFrame, useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { type GLTF, SkeletonUtils } from 'three-stdlib'

type ActionName = 'CloseAction' | 'OpenAction'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    PageBottom: THREE.SkinnedMesh
    PageBottom001: THREE.SkinnedMesh
    Plane_1: THREE.SkinnedMesh
    Plane_2: THREE.SkinnedMesh
    Plane001: THREE.SkinnedMesh
    Plane002: THREE.SkinnedMesh
    Bone: THREE.Bone
  }
  materials: {
    Material: THREE.MeshStandardMaterial
    AncientTome: THREE.MeshStandardMaterial
    ['Cover.back']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

const OPEN_ANIMATION = "OpenAction";
const CLOSE_ANIMATION = "CloseAction";

export function Tome(props: JSX.IntrinsicElements['group'] & { shouldOpen: boolean }) {
  const group = useRef<THREE.Group>(null!);
  const { scene, animations } = useGLTF('/tome.glb');
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as unknown as GLTFResult;
  const { actions, mixer } = useAnimations(animations, group);
  const actionsRef = useRef<{
    open: THREE.AnimationAction | null
    close: THREE.AnimationAction | null
  }>({ open: null, close: null })
  const currentActionRef = useRef<THREE.AnimationAction | null>(null)
  const lastStateRef = useRef<boolean | null>(null)

  useEffect(()=>{
    const openAnimation = THREE.AnimationClip.findByName(animations, OPEN_ANIMATION);
    const closeAnimation = THREE.AnimationClip.findByName(animations, CLOSE_ANIMATION);

    const openAction = openAnimation && mixer.clipAction(openAnimation);
    const closeAction = closeAnimation && mixer.clipAction(closeAnimation);

    if (openAction && closeAction) {
      // Set config
      openAction.clampWhenFinished = true
      closeAction.clampWhenFinished = true
      openAction.loop = THREE.LoopOnce
      closeAction.loop = THREE.LoopOnce

      actionsRef.current = {
        open: openAction,
        close: closeAction,
      }
      // Start with closed
      currentActionRef.current = closeAction;
      currentActionRef.current.play()
    }
  }, [animations, scene])

  useEffect(()=> {
    if (!actionsRef.current.open || !actionsRef.current.close) return
    if (lastStateRef.current === props.shouldOpen) return

    const nextAction = props.shouldOpen ? actionsRef.current.open : actionsRef.current.close
    console.log(nextAction);
    const currentAction = currentActionRef.current

    if (currentAction !== nextAction) {
      nextAction.reset().play();
      if (currentAction) {
        currentAction.crossFadeTo(nextAction, 0.5, false);
      } else {
        nextAction.play()
      }
      currentActionRef.current = nextAction;
      lastStateRef.current = props.shouldOpen;
    }
  }, [props.shouldOpen]);

  // Update mixer each frame
  useFrame((_, delta) => {
    mixer.update(delta)
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" position={[-20, 0, 0]}>
          <primitive object={nodes.Bone} />
        </group>
        <skinnedMesh name="PageBottom" geometry={nodes.PageBottom.geometry} material={materials.Material} skeleton={nodes.PageBottom.skeleton} position={[-20, 0, 0]} />
        <skinnedMesh name="PageBottom001" geometry={nodes.PageBottom001.geometry} material={materials.Material} skeleton={nodes.PageBottom001.skeleton} position={[-20, 0, 0]} />
        <group name="Plane" position={[-20, 0, 0]}>
          <skinnedMesh name="Plane_1" geometry={nodes.Plane_1.geometry} material={materials.AncientTome} skeleton={nodes.Plane_1.skeleton} />
          <skinnedMesh name="Plane_2" geometry={nodes.Plane_2.geometry} material={materials['Cover.back']} skeleton={nodes.Plane_2.skeleton} />
        </group>
        <skinnedMesh name="Plane001" geometry={nodes.Plane001.geometry} material={materials.AncientTome} skeleton={nodes.Plane001.skeleton} position={[-20, 0, 0]} />
        <skinnedMesh name="Plane002" geometry={nodes.Plane002.geometry} material={materials.AncientTome} skeleton={nodes.Plane002.skeleton} position={[-20, 0, 0]} />
      </group>
    </group>
  )
}

useGLTF.preload('/tome.glb')
