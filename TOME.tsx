/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 .\TOME.glb --types --transform -f webp -R 3072 
Files: .\TOME.glb [63.89MB] > D:\Projects\Websites\AboutWoffo\TOME-transformed.glb [2.07MB] (97%)
*/

import * as THREE from 'three'
import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type ActionName = 'CloseAction' | 'OpenAction'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    PageBottom: THREE.SkinnedMesh
    PageBottom001: THREE.SkinnedMesh
    Plane_1: THREE.SkinnedMesh
    Plane_2: THREE.SkinnedMesh
    Plane001: THREE.SkinnedMesh
    Plane002: THREE.SkinnedMesh
    Bone: THREE.Bone
  }
  materials: {
    Material: THREE.MeshStandardMaterial
    AncientTome: THREE.MeshStandardMaterial
    ['Cover.back']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const group = React.useRef<THREE.Group>()
  const { scene, animations } = useGLTF('/TOME-transformed.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions } = useAnimations(animations, group)
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" position={[-20, 0, 0]}>
          <primitive object={nodes.Bone} />
        </group>
        <skinnedMesh name="PageBottom" geometry={nodes.PageBottom.geometry} material={materials.Material} skeleton={nodes.PageBottom.skeleton} position={[-20, 0, 0]} />
        <skinnedMesh name="PageBottom001" geometry={nodes.PageBottom001.geometry} material={materials.Material} skeleton={nodes.PageBottom001.skeleton} position={[-20, 0, 0]} />
        <group name="Plane" position={[-20, 0, 0]}>
          <skinnedMesh name="Plane_1" geometry={nodes.Plane_1.geometry} material={materials.AncientTome} skeleton={nodes.Plane_1.skeleton} />
          <skinnedMesh name="Plane_2" geometry={nodes.Plane_2.geometry} material={materials['Cover.back']} skeleton={nodes.Plane_2.skeleton} />
        </group>
        <skinnedMesh name="Plane001" geometry={nodes.Plane001.geometry} material={materials.AncientTome} skeleton={nodes.Plane001.skeleton} position={[-20, 0, 0]} />
        <skinnedMesh name="Plane002" geometry={nodes.Plane002.geometry} material={materials.AncientTome} skeleton={nodes.Plane002.skeleton} position={[-20, 0, 0]} />
      </group>
    </group>
  )
}

useGLTF.preload('/TOME-transformed.glb')
